// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: omc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OMCClient is the client API for OMC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OMCClient interface {
	AddBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error)
	GetBlocks(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*Block, error)
}

type oMCClient struct {
	cc grpc.ClientConnInterface
}

func NewOMCClient(cc grpc.ClientConnInterface) OMCClient {
	return &oMCClient{cc}
}

func (c *oMCClient) AddBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto_omc.OMC/AddBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oMCClient) GetBlocks(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/proto_omc.OMC/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OMCServer is the server API for OMC service.
// All implementations must embed UnimplementedOMCServer
// for forward compatibility
type OMCServer interface {
	AddBlock(context.Context, *Block) (*Empty, error)
	GetBlocks(context.Context, *BlockId) (*Block, error)
	mustEmbedUnimplementedOMCServer()
}

// UnimplementedOMCServer must be embedded to have forward compatible implementations.
type UnimplementedOMCServer struct {
}

func (UnimplementedOMCServer) AddBlock(context.Context, *Block) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (UnimplementedOMCServer) GetBlocks(context.Context, *BlockId) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedOMCServer) mustEmbedUnimplementedOMCServer() {}

// UnsafeOMCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OMCServer will
// result in compilation errors.
type UnsafeOMCServer interface {
	mustEmbedUnimplementedOMCServer()
}

func RegisterOMCServer(s grpc.ServiceRegistrar, srv OMCServer) {
	s.RegisterService(&OMC_ServiceDesc, srv)
}

func _OMC_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OMCServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_omc.OMC/AddBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OMCServer).AddBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _OMC_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OMCServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_omc.OMC/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OMCServer).GetBlocks(ctx, req.(*BlockId))
	}
	return interceptor(ctx, in, info, handler)
}

// OMC_ServiceDesc is the grpc.ServiceDesc for OMC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OMC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_omc.OMC",
	HandlerType: (*OMCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBlock",
			Handler:    _OMC_AddBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _OMC_GetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "omc.proto",
}
